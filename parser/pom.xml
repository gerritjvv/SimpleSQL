<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- ======================================================================= 
		A quickstart pom.xml that creates a sample project that uses ANTLR 3.x grammars. 
		You should replace the sample grammars in src/main/antlr3 with your own grammar 
		files and use packages. A .g file in src/main/antlr3/com/temporalwave belongs 
		in the package com.temporalwave See http://antlr.org/antlr3-maven-plugin 
		for more details. This project produces both a jar file of the project and 
		an executeable jar file that contains all the dependencies so you can run 
		it standalone. See below for more details. Archetype by Jim Idle (jimi@temporal-wave.com) 
		- Oct 2009 Report bugs to the ANTLR interest list at http://www.antlr.org 
		Generated by antlr3-maven-archetype version 3.4 ======================================================================= -->

	<!-- This is your organizations normal group name such as org.antlr All 
		the artifacts you create will be under this group id. -->
	<groupId>org.simplesql</groupId>

	<!-- This is how maven knows your artifact -->
	<artifactId>parser</artifactId>

	<!-- This is the human oriented name for the package so you can call it 
		anything you like -->
	<name>SimpleSQL</name>

	<!-- This is the version of YOUR project -->
	<version>0.1.0</version>

	<packaging>jar</packaging>
	<url>https://github.com/gerritjvv/SimpleSQL</url>

	<dependencies>

		<!-- We need to have the ANTLR runtime jar when running and compiling. -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.14</version>
		</dependency>
		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>antlr-runtime</artifactId>
			<version>3.4</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>11.0</version>
		</dependency>
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>2.0</version>
		</dependency>

		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm-all</artifactId>
			<version>3.3.1</version>
		</dependency>
		<dependency>
			<groupId>janino</groupId>
			<artifactId>janino</artifactId>
			<version>2.5.10</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.axonframework.com.lmax</groupId>
			<artifactId>disruptor</artifactId>
			<version>2.6</version>
		</dependency>

	</dependencies>

	<build>

		<defaultGoal>install</defaultGoal>

		<plugins>

			<plugin>

				<groupId>org.antlr</groupId>
				<artifactId>antlr3-maven-plugin</artifactId>
				<version>3.4</version>
				<executions>
					<execution>
						<goals>
							<goal>antlr</goal>
						</goals>
					</execution>
				</executions>

			</plugin>

			<!-- Strictly speaking, we did not need to generate this for you from 
				the prototype, but we use it to illustrate how you can get the JDK 6 Java 
				compiler to accept 1.5 or 1.6 targeted source code but produce class files 
				that are compatible with JRE 1.4. As Michael Caine might not say, "Not a 
				lot of people know that!" -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.0.2</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
					<sourceDirectory>src</sourceDirectory>
				</configuration>
			</plugin>

		</plugins>
	</build>

	<repositories>
		<repository>
			<id>streams-releases</id>
			<url>https://bigstreams.googlecode.com/svn/mvnrepo/releases</url>
		</repository>
		<repository>
			<id>streams-snapshots</id>
			<url>https://bigstreams.googlecode.com/svn/mvnrepo/snapshots</url>
		</repository>
	</repositories>

</project>
